basePath: /api/v1
definitions:
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.LyricsResponse:
    properties:
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
      verses:
        items:
          type: string
        type: array
    type: object
  dto.PaginatedResponse:
    properties:
      data: {}
      page:
        type: integer
      size:
        type: integer
      total:
        type: integer
    type: object
  dto.SongRequest:
    properties:
      group:
        type: string
      song:
        type: string
    required:
    - group
    - song
    type: object
  dto.SongResponse:
    properties:
      group:
        type: string
      id:
        type: integer
      link:
        type: string
      release_date:
        type: string
      song:
        type: string
      text:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A RESTful API for managing a music library with external API integration
  title: Music Library API
  version: "1.0"
paths:
  /songs:
    get:
      description: Get a list of songs with pagination and filtering options
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: size
        type: integer
      - description: Filter by group name
        in: query
        name: group
        type: string
      - description: Filter by song name
        in: query
        name: song
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.PaginatedResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get songs with pagination and filtering
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Create a new song with external API enrichment
      parameters:
      - description: Song information
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/dto.SongRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a new song
      tags:
      - songs
  /songs/{id}:
    delete:
      description: Delete a song by ID
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a song
      tags:
      - songs
    put:
      consumes:
      - application/json
      description: Update a song's information
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated song information
        in: body
        name: song
        required: true
        schema:
          $ref: '#/definitions/dto.SongRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SongResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a song
      tags:
      - songs
  /songs/{id}/lyrics:
    get:
      description: Get song lyrics divided into verses with pagination
      parameters:
      - description: Song ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 4
        description: Verses per page
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LyricsResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get song lyrics with pagination by verses
      tags:
      - songs
swagger: "2.0"
